name: Continuous delivery

on:
  release:
    types: [published]

env:
  SETUP_NODE_NODE_VERSION: 19

jobs:
  hadolint-check:
    name: Hadolint check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - uses: hadolint/hadolint-action@v2.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: ignore
  eslint-check:
    name: ESLint check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Switch to release tag
        run: |
          git checkout ${{github.event.release.tag_name}}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.SETUP_NODE_NODE_VERSION }}
          cache: "npm"
      - name: Install dependencies
        run: |
          npm ci
      - name: Run eslint
        run: |
          npm run eslint:check
  jest-check:
    name: Jest check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.SETUP_NODE_NODE_VERSION }}
          cache: "npm"
      - name: Switch to release tag
        run: |
          git checkout ${{github.event.release.tag_name}}
      - name: Install dependencies
        run: |
          npm ci
      - name: Run Jest
        run: |
          npm run jest:check
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage_report
          path: coverage_report
  npm-audit-check:
    name: NPM audit check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Switch to release tag
        run: |
          git checkout ${{github.event.release.tag_name}}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.SETUP_NODE_NODE_VERSION }}
          cache: "npm"
      - name: Run npm audit
        run: |
          npm run npm-audit:check
  compile-check:
    name: Compile check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Switch to release tag
        run: |
          git checkout ${{github.event.release.tag_name}}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.SETUP_NODE_NODE_VERSION }}
          cache: "npm"
      - name: Install dependencies
        run: |
          npm ci
      - name: Run compile check
        run: |
          npm run compile:check
  compile:
    name: Compile
    needs: [eslint-check, jest-check, compile-check]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Switch to release tag
        run: |
          git checkout ${{github.event.release.tag_name}}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.SETUP_NODE_NODE_VERSION }}
          cache: "npm"
      - name: Install dependencies
        run: |
          npm ci
      - name: Compile
        run: |
          npm run compile
      - name: Upload compile
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist
  publish:
    name: Publish
    needs: [compile, hadolint-check]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Switch to release tag
        run: |
          git checkout ${{github.event.release.tag_name}}
      - name: Build image
        run: |
          docker build -f ./Dockerfile -t ${{secrets.DOCKER_IMAGE_NAME}}:${{github.event.release.tag_name}} .
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_HUB_USERNAME}}
          password: ${{secrets.DOCKER_HUB_ACCESS_TOKEN}}
      - name: Publish to Docker Hub with given tag
        run: |
          docker build -f ./Dockerfile -t ${{secrets.DOCKER_IMAGE_NAME}}:${{github.event.release.tag_name}} .
          docker push ${{secrets.DOCKER_IMAGE_NAME}}:${{github.event.release.tag_name}}
  deploy:
    needs:
      - publish
    name: Deploy publicly
    if: ${{github.event.release.tag_name == 'latest'}}
    runs-on: ubuntu-latest
    steps:
      - name: SSH to gacko.pl
        uses: appleboy/ssh-action@master
        with:
          key: ${{secrets.DEPLOY_SSH_PRIVATE_KEY}}
          host: ${{secrets.DEPLOY_SSH_HOST}}
          username: ${{secrets.DEPLOY_SSH_USERNAME}}
          script: |
            cd repositories/products-service
            git pull
            git checkout ${{github.event.release.tag_name}}
            cd helm
            helm upgrade products-service . --set image.tag=${{github.event.release.tag_name}}
